const io = require('socket.io-client');

console.log('üîÑ Test des WebSockets...');

const socket = io('http://localhost:3000');

socket.on('connect', function() {
  console.log('‚úÖ Connect√© au serveur Socket.IO');

  // Test start-call event
  console.log('üì§ Envoi de start-call...');
  socket.emit('start-call', { callId: 'test-123' });

  // Apr√®s 2 secondes, test audio-data (simul√© avec buffer)
  setTimeout(() => {
    console.log('üì§ Envoi de audio-data simul√©...');
    // Simuler un buffer audio PCM16 (remplacer par vrai audio)
    const fakeAudioBuffer = Buffer.from('fake audio data');
    socket.emit('audio-data', fakeAudioBuffer);
  }, 2000);

  // Apr√®s 5 secondes, test end-call
  setTimeout(() => {
    console.log('üì§ Envoi de end-call...');
    socket.emit('end-call', { callId: 'test-123' });
  }, 5000);
});

socket.on('call-started', function(data) {
  console.log('‚úÖ Call started re√ßu:', data);
});

socket.on('ai-text-delta', function(data) {
  console.log('‚úÖ AI text delta:', data.delta);
});

socket.on('ai-audio-delta', function(data) {
  console.log('‚úÖ AI audio delta re√ßu (taille:', data.audio.length, ')');
});

socket.on('call-ended', function(data) {
  console.log('‚úÖ Call ended re√ßu:', data);
  if (data.transcription) {
    console.log('üìù Transcription compl√®te:', data.transcription);
  }
});

socket.on('error', function(err) {
  console.error('‚ùå Erreur Socket:', err);
});

socket.on('disconnect', function() {
  console.log('üîå D√©connect√© du serveur');
});

// Timeout apr√®s 10 secondes
setTimeout(() => {
  console.log('‚è∞ Test termin√©');
  socket.disconnect();
  process.exit(0);
}, 10000);